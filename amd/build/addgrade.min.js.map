{"version":3,"file":"addgrade.min.js","sources":["../src/addgrade.js"],"sourcesContent":["/**\n * Add grade js logic.\n *\n * @copyright   2023 World Bank Group <https://worldbank.org>\n * @author      Willian Mano <willianmanoaraujo@gmail.com>\n */\n\n/* eslint-disable */\ndefine([\n        'jquery',\n        'core/config',\n        'core/str',\n        'core/modal_factory',\n        'core/modal_events',\n        'core/fragment',\n        'core/ajax',\n        'mod_portfoliogroup/sweetalert',\n        'core/yui'],\n    function($, Config, Str, ModalFactory, ModalEvents, Fragment, Ajax, Swal, Y) {\n        /**\n         * Constructor for the AddGrade.\n         *\n         * @param selector The selector to open the modal\n         * @param contextid The course module contextid\n         */\n        var AddGrade = function(contextid) {\n            this.contextid = contextid;\n\n            this.registerEventListeners();\n        };\n\n        /**\n         * @var {Modal} modal\n         * @private\n         */\n        AddGrade.prototype.modal = null;\n\n        /**\n         * @var {int} contextid\n         * @private\n         */\n        AddGrade.prototype.contextid = -1;\n\n        /**\n         * @var {int} gradebutton\n         * @private\n         */\n        AddGrade.prototype.gradebutton = -1;\n\n        AddGrade.prototype.registerEventListeners = function() {\n            $(\".grade-portfolio\").click(function(event) {\n                this.gradebutton = $(event.currentTarget);\n\n                this.openModal(this.gradebutton.data('portfolioid'), this.gradebutton.data('userid'));\n            }.bind(this));\n        };\n\n        AddGrade.prototype.openModal = function(portfolioid, groupid) {\n            ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: 'Add grade',\n                body: this.getBody({instanceid: portfolioid, userid: userid}),\n            }).then(function(modal) {\n                this.modal = modal;\n\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.setBody(this.getBody({instanceid: portfolioid, userid: userid}));\n                }.bind(this));\n\n                // We want to hide the submit buttons every time it is opened.\n                this.modal.getRoot().on(ModalEvents.shown, function() {\n                    this.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                this.modal.show();\n            }.bind(this));\n        };\n\n        /**\n         * @method getBody\n         *\n         * @private\n         *\n         * @return {Promise}\n         */\n        AddGrade.prototype.getBody = function(formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n\n            // Get the content of the modal.\n            var params = {jsonformdata: JSON.stringify(formdata)};\n\n            return Fragment.loadFragment('mod_portfoliogroup', 'grade_form', this.contextid, params);\n        };\n\n        /**\n         * @method handleFormSubmissionResponse\n         *\n         * @private\n         *\n         * @return {Promise}\n         */\n        AddGrade.prototype.handleFormSubmissionResponse = function(data) {\n            this.modal.hide();\n\n            // We could trigger an event instead.\n            Y.use('moodle-core-formchangechecker', function() {\n                M.core_formchangechecker.reset_form_dirty_state();\n            });\n\n            const usergradeinfo = $('.usergradeinfo');\n\n            usergradeinfo.empty();\n\n            usergradeinfo.append(\"<span class='badge badge-success'>\"+data.assessmenttext+\"</span>\");\n\n            var Toast = Swal.mixin({\n                toast: true,\n                position: 'top-end',\n                showConfirmButton: false,\n                timer: 8000,\n                timerProgressBar: true,\n                onOpen: (toast) => {\n                    toast.addEventListener('mouseenter', Swal.stopTimer);\n                    toast.addEventListener('mouseleave', Swal.resumeTimer);\n                }\n            });\n\n            Toast.fire({\n                icon: 'success',\n                title: data.message\n            });\n        };\n\n        /**\n         * @method handleFormSubmissionFailure\n         *\n         * @private\n         *\n         * @return {Promise}\n         */\n        AddGrade.prototype.handleFormSubmissionFailure = function(data) {\n            // Oh noes! Epic fail :(\n            // Ah wait - this is normal. We need to re-display the form with errors!\n            this.modal.setBody(this.getBody(data));\n        };\n\n        /**\n         * Private method\n         *\n         * @method submitFormAjax\n         *\n         * @private\n         *\n         * @param {Event} e Form submission event.\n         */\n        AddGrade.prototype.submitFormAjax = function(e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            var changeEvent = document.createEvent('HTMLEvents');\n            changeEvent.initEvent('change', true, true);\n\n            // Prompt all inputs to run their validation functions.\n            // Normally this would happen when the form is submitted, but\n            // since we aren't submitting the form normally we need to run client side\n            // validation.\n            this.modal.getRoot().find(':input').each(function(index, element) {\n                element.dispatchEvent(changeEvent);\n            });\n\n            // Now the change events have run, see if there are any \"invalid\" form fields.\n            var invalid = $.merge(\n                this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n                this.modal.getRoot().find('.error')\n            );\n\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\n            if (invalid.length) {\n                invalid.first().focus();\n                return;\n            }\n\n            // Convert all the form elements values to a serialised string.\n            var formData = this.modal.getRoot().find('form').serialize();\n\n            // Now we can continue...\n            Ajax.call([{\n                methodname: 'mod_portfoliogroup_gradeportfolio',\n                args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\n                done: this.handleFormSubmissionResponse.bind(this),\n                fail: this.handleFormSubmissionFailure.bind(this, formData)\n            }]);\n        };\n\n        /**\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        AddGrade.prototype.submitForm = function(e) {\n            e.preventDefault();\n\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return {\n            init: function(contextid) {\n                return new AddGrade(contextid);\n            }\n        };\n    }\n);"],"names":["define","$","Config","Str","ModalFactory","ModalEvents","Fragment","Ajax","Swal","Y","AddGrade","contextid","registerEventListeners","prototype","modal","gradebutton","click","event","currentTarget","openModal","this","data","bind","portfolioid","groupid","create","type","types","SAVE_CANCEL","title","body","getBody","instanceid","userid","then","getRoot","on","hidden","setBody","shown","append","save","submitForm","submitFormAjax","show","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","usergradeinfo","empty","assessmenttext","mixin","toast","position","showConfirmButton","timer","timerProgressBar","onOpen","addEventListener","stopTimer","resumeTimer","fire","icon","message","handleFormSubmissionFailure","e","preventDefault","changeEvent","document","createEvent","initEvent","find","each","index","element","dispatchEvent","invalid","merge","length","first","focus","formData","serialize","call","methodname","args","done","fail","submit","init"],"mappings":"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"}